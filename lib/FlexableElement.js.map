{"version":3,"sources":["../src/FlexableElement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAM,kBAAkB,SAAlB,eAAkB,OAYlB;QAXF,iBAWE;QAVF,aAUE;QATF,2BASE;QARF,yBAQE;QAPF,2BAOE;;AANF,uBAME;QALF,2CAKE;QAJF,iBAIE;QAHF,yCAGE;QAFF,2BAEE;QADC,2LACD;;AACF,QAAI,OAAO,WAAW,QAAX,GAAsB,SAAtB,CADT;AAEF,QAAI,qBAAqB,iBAArB,CAFF;AAGF,QAAM,mBAAmB,sBAAO,cAAP,6CAA2B,WAA3B,CAAnB,CAHJ;;AAKF,QAAI,CAAC,kBAAD,EAAqB;AACrB,YAAI,gBAAJ,EAAsB;AAClB,iCAAqB;uBAAM,gBAAM,QAAN,CAAe,GAAf,CAAmB,IAAnB,EAAyB,UAAC,CAAD,EAAG,CAAH;2BAAS,gBAAM,YAAN,CAAmB,CAAnB,2BAAwB,KAAK,iBAAiB,IAAjB,EAAuB,CAAvB,CAAL,IAAmC,iBAA3D;iBAAT;aAA/B,CADH;SAAtB,MAEO;AACH,iCAAqB;uBAAM,gBAAM,QAAN,CAAe,GAAf,CAAmB,IAAnB,EAAyB;2BAAK,gBAAM,YAAN,CAAmB,CAAnB,EAAsB,gBAAtB;iBAAL;aAA/B,CADlB;SAFP;KADJ;;AAQA,QAAM,sBAAsB,mBAAmB,IAAnB,EAAyB,gBAAzB,CAAtB,CAbJ;;AAeF,WACI;;UAAK,IAAI,EAAJ,EAAQ,KAAK,IAAL,EAAW,OAAO,KAAP,EAAc,WAAW,SAAX,EAAtC;QACM,gBAAM,QAAN,CAAe,KAAf,CAAqB,IAArB,IAA6B,CAA7B,GAAiC,mBAAjC,GAAuD,IAAvD;KAFV,CAfE;CAZkB;;AAkCxB,gBAAgB,SAAhB,GAA4B;AACxB,UAAM,iBAAU,MAAV;AACN,eAAW,iBAAU,MAAV;AACX,WAAO,iBAAU,MAAV;AACP,UAAM,iBAAU,GAAV;AACN,eAAW,iBAAU,KAAV;AACX,uBAAmB,iBAAU,IAAV;AACnB,sBAAkB,iBAAU,IAAV;CAPtB;;AAUA,gBAAgB,YAAhB,GAA+B;AAC3B,UAAM,EAAN;AACA,WAAO,sBAAc,IAAd,CAAP;AACA,eAAW,EAAX;AACA,eAAW,EAAX;CAJJ;;kBAOe","file":"FlexableElement.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport except from 'except';\r\n\r\nconst FlexableElement = ({\r\n    _key,\r\n    id,\r\n    className,\r\n    children,\r\n    _children, // since we React can override provided children props\r\n    style,\r\n    transformChildren,\r\n    text,\r\n    generateChildKey,\r\n    omitProps,\r\n    ...remainingProps\r\n}) => {\r\n    let kids = children ? children : _children;\r\n    let _transformChildren = transformChildren;\r\n    const passthroughProps = except(remainingProps, [...omitProps]);\r\n\r\n    if (!_transformChildren) {\r\n        if (generateChildKey) {\r\n            _transformChildren = () => React.Children.map(kids, (c,i) => React.cloneElement(c, { key: generateChildKey(_key, i), ...passthroughProps }));\r\n        } else {\r\n            _transformChildren = () => React.Children.map(kids, c => React.cloneElement(c, passthroughProps))\r\n        }\r\n    }\r\n\r\n    const transformedChildren = _transformChildren(kids, passthroughProps);\r\n\r\n    return (\r\n        <div id={id} key={_key} style={style} className={className}>\r\n            { React.Children.count(kids) > 0 ? transformedChildren : text }\r\n        </div>\r\n    );\r\n};\r\n\r\nFlexableElement.propTypes = {\r\n    _key: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    text: PropTypes.any,\r\n    omitProps: PropTypes.array,\r\n    transformChildren: PropTypes.func,\r\n    generateChildKey: PropTypes.func\r\n};\r\n\r\nFlexableElement.defaultProps = {\r\n    text: '',\r\n    style: Object.create(null),\r\n    omitProps: [],\r\n    className: ''\r\n};\r\n\r\nexport default FlexableElement;\r\n"]}