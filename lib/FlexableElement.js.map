{"version":3,"sources":["../src/FlexableElement.js"],"names":["FlexableElement","id","className","children","_children","style","transformChildren","text","omitProps","remainingProps","kids","_transformChildren","passthroughProps","Children","map","isValidElement","c","cloneElement","transformedChildren","count","propTypes","string","object","any","array","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,OAUlB;AAAA,QATFC,EASE,QATFA,EASE;AAAA,QARFC,SAQE,QARFA,SAQE;AAAA,QAPFC,QAOE,QAPFA,QAOE;AAAA,QANFC,SAME,QANFA,SAME;AAAA,QALFC,KAKE,QALFA,KAKE;AAAA,QAJFC,iBAIE,QAJFA,iBAIE;AAAA,QAHFC,IAGE,QAHFA,IAGE;AAAA,QAFFC,SAEE,QAFFA,SAEE;AAAA,QADCC,cACD;;AACF,QAAIC,OAAOP,WAAWA,QAAX,GAAsBC,SAAjC;AACA,QAAIO,qBAAqBL,iBAAzB;AACA,QAAMM,mBAAmB,sBAAOH,cAAP,6CAA2BD,SAA3B,GAAzB;;AAEA,QAAI,CAACG,kBAAL,EAAyB;AACrBA,6BAAqB;AAAA,mBAAM,gBAAME,QAAN,CAAeC,GAAf,CAAmBJ,IAAnB,EAAyB,aAAK;AACrD;AACA,oBAAI,CAAC,gBAAMK,cAAN,CAAqBC,CAArB,CAAL,EAA8B;AAC1B,2BAAOA,CAAP;AACH;AACD,uBAAO,gBAAMC,YAAN,CAAmBD,CAAnB,EAAsBJ,gBAAtB,CAAP;AACH,aAN0B,CAAN;AAAA,SAArB;AAOH;;AAED,QAAMM,sBAAsBP,mBAAmBD,IAAnB,EAAyBE,gBAAzB,CAA5B;;AAEA,WACI;AAAA;AAAA,UAAK,IAAIX,EAAT,EAAa,OAAOI,KAApB,EAA2B,WAAWH,SAAtC;AACM,wBAAMW,QAAN,CAAeM,KAAf,CAAqBT,IAArB,IAA6B,CAA7B,GAAiCQ,mBAAjC,GAAuDX;AAD7D,KADJ;AAKH,CAhCD;;AAkCAP,gBAAgBoB,SAAhB,GAA4B;AACxBlB,eAAW,iBAAUmB,MADG;AAExBhB,WAAO,iBAAUiB,MAFO;AAGxBf,UAAM,iBAAUgB,GAHQ;AAIxBf,eAAW,iBAAUgB,KAJG;AAKxBlB,uBAAmB,iBAAUmB;AALL,CAA5B;;AAQAzB,gBAAgB0B,YAAhB,GAA+B;AAC3BnB,UAAM,EADqB;AAE3BF,WAAO,sBAAc,IAAd,CAFoB;AAG3BG,eAAW,EAHgB;AAI3BN,eAAW;AAJgB,CAA/B;;kBAOeF,e","file":"FlexableElement.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport except from 'except';\r\n\r\nconst FlexableElement = ({\r\n    id,\r\n    className,\r\n    children,\r\n    _children, // since we React can override provided children props\r\n    style,\r\n    transformChildren,\r\n    text,\r\n    omitProps,\r\n    ...remainingProps\r\n}) => {\r\n    let kids = children ? children : _children;\r\n    let _transformChildren = transformChildren;\r\n    const passthroughProps = except(remainingProps, [...omitProps]);\r\n\r\n    if (!_transformChildren) {\r\n        _transformChildren = () => React.Children.map(kids, c => {\r\n            // in trash, out trash\r\n            if (!React.isValidElement(c)) {\r\n                return c;\r\n            }\r\n            return React.cloneElement(c, passthroughProps);\r\n        })\r\n    }\r\n\r\n    const transformedChildren = _transformChildren(kids, passthroughProps);\r\n\r\n    return (\r\n        <div id={id} style={style} className={className}>\r\n            { React.Children.count(kids) > 0 ? transformedChildren : text }\r\n        </div>\r\n    );\r\n};\r\n\r\nFlexableElement.propTypes = {\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    text: PropTypes.any,\r\n    omitProps: PropTypes.array,\r\n    transformChildren: PropTypes.func,\r\n};\r\n\r\nFlexableElement.defaultProps = {\r\n    text: '',\r\n    style: Object.create(null),\r\n    omitProps: [],\r\n    className: ''\r\n};\r\n\r\nexport default FlexableElement;\r\n"]}