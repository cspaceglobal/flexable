{"version":3,"sources":["../src/FlexableElement.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAM,kBAAkB,SAAlB,eAAkB,OAUlB;QATF,aASE;QARF,2BAQE;QAPF,yBAOE;QANF,2BAME;;AALF,uBAKE;QAJF,2CAIE;QAHF,iBAGE;QAFF,2BAEE;QADC,+JACD;;AACF,QAAI,OAAO,WAAW,QAAX,GAAsB,SAAtB,CADT;AAEF,QAAI,qBAAqB,iBAArB,CAFF;AAGF,QAAM,mBAAmB,sBAAO,cAAP,6CAA2B,WAA3B,CAAnB,CAHJ;;AAKF,QAAI,CAAC,kBAAD,EAAqB;AACrB,6BAAqB;mBAAM,gBAAM,QAAN,CAAe,GAAf,CAAmB,IAAnB,EAAyB,aAAK;;AAErD,oBAAI,CAAC,gBAAM,cAAN,CAAqB,CAArB,CAAD,EAA0B;AAC1B,2BAAO,CAAP,CAD0B;iBAA9B;AAGA,uBAAO,gBAAM,YAAN,CAAmB,CAAnB,EAAsB,gBAAtB,CAAP,CALqD;aAAL;SAA/B,CADA;KAAzB;;AAUA,QAAM,sBAAsB,mBAAmB,IAAnB,EAAyB,gBAAzB,CAAtB,CAfJ;;AAiBF,WACI;;UAAK,IAAI,EAAJ,EAAQ,OAAO,KAAP,EAAc,WAAW,SAAX,EAA3B;QACM,gBAAM,QAAN,CAAe,KAAf,CAAqB,IAArB,IAA6B,CAA7B,GAAiC,mBAAjC,GAAuD,IAAvD;KAFV,CAjBE;CAVkB;;AAkCxB,gBAAgB,SAAhB,GAA4B;AACxB,eAAW,iBAAU,MAAV;AACX,WAAO,iBAAU,MAAV;AACP,UAAM,iBAAU,GAAV;AACN,eAAW,iBAAU,KAAV;AACX,uBAAmB,iBAAU,IAAV;CALvB;;AAQA,gBAAgB,YAAhB,GAA+B;AAC3B,UAAM,EAAN;AACA,WAAO,sBAAc,IAAd,CAAP;AACA,eAAW,EAAX;AACA,eAAW,EAAX;CAJJ;;kBAOe","file":"FlexableElement.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport except from 'except';\r\n\r\nconst FlexableElement = ({\r\n    id,\r\n    className,\r\n    children,\r\n    _children, // since we React can override provided children props\r\n    style,\r\n    transformChildren,\r\n    text,\r\n    omitProps,\r\n    ...remainingProps\r\n}) => {\r\n    let kids = children ? children : _children;\r\n    let _transformChildren = transformChildren;\r\n    const passthroughProps = except(remainingProps, [...omitProps]);\r\n\r\n    if (!_transformChildren) {\r\n        _transformChildren = () => React.Children.map(kids, c => {\r\n            // in trash, out trash\r\n            if (!React.isValidElement(c)) {\r\n                return c;\r\n            }\r\n            return React.cloneElement(c, passthroughProps);\r\n        })\r\n    }\r\n\r\n    const transformedChildren = _transformChildren(kids, passthroughProps);\r\n\r\n    return (\r\n        <div id={id} style={style} className={className}>\r\n            { React.Children.count(kids) > 0 ? transformedChildren : text }\r\n        </div>\r\n    );\r\n};\r\n\r\nFlexableElement.propTypes = {\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    text: PropTypes.any,\r\n    omitProps: PropTypes.array,\r\n    transformChildren: PropTypes.func,\r\n};\r\n\r\nFlexableElement.defaultProps = {\r\n    text: '',\r\n    style: Object.create(null),\r\n    omitProps: [],\r\n    className: ''\r\n};\r\n\r\nexport default FlexableElement;\r\n"]}