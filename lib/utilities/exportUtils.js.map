{"version":3,"sources":["../../src/utilities/exportUtils.js"],"names":[],"mappings":";;;;;QAEgB;QAUA;QAYA;QAOA;;AA/BhB;;AAEO,SAAS,kBAAT,CAA4B,iBAA5B,EAA+C,IAA/C,EAA4I;QAAvF,gEAAU,kBAA6E;QAAzE,mEAAa,gCAA4D;QAA1C,wEAAkB,sCAAwB;QACzI,UAAuB,QAAvB,QADyI;QAChI,YAAc,QAAd,UADgI;;AAE/I,gBAAY,YAAY,SAAZ,GAAwB,GAAxB,CAFmI;AAG/I,QAAI,SAAS,YAAY,KAAZ,GAAqB,EAArB,GAAyB,GAAzB,CAHkI;AAI/I,QAAM,SAAY,gBAAgB,iBAAhB,EAAmC,SAAnC,UAAZ,CAJyI;AAK/I,QAAM,OAAO,KAAK,GAAL,CAAS;eAAK,WAAW,CAAX,EAAc,iBAAd,EAAiC,SAAjC;KAAL,CAAT,CAA2D,IAA3D,CAAgE,MAAhE,CAAP,CALyI;AAM/I,kBAAY,SAAS,SAAS,IAA9B,CAN+I;AAO/I,WAAO,MAAP,CAP+I;CAA5I;;AAUA,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,iBAA/B,EAAkD,SAAlD,EAA6D;AAChE,WAAO,kBACF,GADE,CACE,aAAK;AACN,YAAI,iBAAiB,CAAjB,CADE;AAEN,YAAI,OAAO,EAAE,UAAF,KAAiB,UAAxB,EAAoC;AACpC,6BAAiB,EAAE,UAAF,CAAa,GAAb,CAAjB,CADoC;SAAxC;AAGA,eAAO,uBAAuB,eAAe,WAAf,CAA2B,GAA3B,CAAvB,EAAwD,SAAxD,CAAP,CALM;KAAL,CADF,CAQF,IARE,CAQG,SARH,CAAP,CADgE;CAA7D;;AAYA,SAAS,sBAAT,CAAgC,iBAAhC,EAAmD,SAAnD,EAA8D;AACjE,WAAO,kBACF,GADE,CACE;eAAK,uBAAuB,EAAE,gBAAF,EAAoB,SAA3C;KAAL,CADF,CAEF,IAFE,CAEG,SAFH,CAAP,CADiE;CAA9D;;;AAOA,SAAS,sBAAT,CAAgC,MAAhC,EAAyD;QAAjB,kEAAY,mBAAK;;AAC5D,QAAI,SAAS,MAAT,CADwD;AAE5D,QAAM,QAAQ,GAAR,CAFsD;AAG5D,QAAM,eAAe,IAAf,CAHsD;AAI5D,QAAM,gBAAgB,CAAC,SAAD,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,MAAzB,CAAhB,CAJsD;AAK5D,aAAS,OAAO,MAAP,EAAe,OAAf,CAAuB,IAAI,MAAJ,MAAc,KAAd,EAAuB,GAAvB,CAAvB,EAAoD,YAApD,CAAT,CAL4D;;AAO5D,QAAI,oCAAkB,MAAlB,EAA0B,aAA1B,CAAJ,EAA8C;AAC1C,sBAAY,QAAQ,SAAS,KAA7B,CAD0C;KAA9C;;AAIA,WAAO,MAAP,CAX4D;CAAzD","file":"exportUtils.js","sourcesContent":["import { stringContainsAny } from './stringUtils';\r\n\r\nexport function convertToCsvString(columnDefinitions, data, options = {}, formatRows = defaultFormatRow, formatHeaderRow = defaultFormatHeaderRow) {\r\n    let { utf8Bom, delimeter } = options;\r\n    delimeter = delimeter ? delimeter : ',';\r\n    let result = utf8Bom === false  ? '': '\\ufeff';\r\n    const header = `${formatHeaderRow(columnDefinitions, delimeter)}\\r\\n`;\r\n    const rows = data.map(r => formatRows(r, columnDefinitions, delimeter)).join('\\r\\n');\r\n    result = `${result}${header}${rows}`;\r\n    return result;\r\n}\r\n\r\nexport function defaultFormatRow(row, columnDefinitions, delimeter) {\r\n    return columnDefinitions\r\n        .map(d => {\r\n            let cellDefinition = d;\r\n            if (typeof d.defineCell === 'function') {\r\n                cellDefinition = d.defineCell(row);\r\n            }\r\n            return safeConvertToCsvRecord(cellDefinition.propertyMap(row), delimeter)\r\n        })\r\n        .join(delimeter);\r\n}\r\n\r\nexport function defaultFormatHeaderRow(columnDefinitions, delimeter) {\r\n    return columnDefinitions\r\n        .map(d => safeConvertToCsvRecord(d.columnHeaderText, delimeter))\r\n        .join(delimeter);\r\n}\r\n\r\n// according to https://tools.ietf.org/html/rfc4180\r\nexport function safeConvertToCsvRecord(record, delimeter = ',') {\r\n    let result = record;\r\n    const quote = '\"';\r\n    const escapedQuote = '\"\"';\r\n    const charsToEscape = [delimeter, quote, '\\n', '\\r\\n'];\r\n    result = String(result).replace(new RegExp(`${quote}`, 'g'), escapedQuote);\r\n\r\n    if (stringContainsAny(result, charsToEscape)) {\r\n        result = `${quote}${result}${quote}`;\r\n    }\r\n\r\n    return result;\r\n}\r\n"]}