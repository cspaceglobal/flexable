{"version":3,"sources":["../../src/utilities/exportUtils.js"],"names":["convertToCsvString","defaultFormatRow","defaultFormatHeaderRow","safeConvertToCsvRecord","columnDefinitions","data","options","formatRows","formatHeaderRow","utf8Bom","delimeter","result","header","rows","map","r","join","row","cellDefinition","d","defineCell","propertyMap","columnHeaderText","record","quote","escapedQuote","charsToEscape","String","replace","RegExp"],"mappings":";;;;;;;;;;QAEgBA,kB,GAAAA,kB;QAUAC,gB,GAAAA,gB;QAYAC,sB,GAAAA,sB;QAOAC,sB,GAAAA,sB;;AA/BhB;;;;AAEO,SAASH,kBAAT,CAA4BI,iBAA5B,EAA+CC,IAA/C,EAA4I;AAAA,QAAvFC,OAAuF,uEAA7E,EAA6E;AAAA,QAAzEC,UAAyE,uEAA5DN,gBAA4D;AAAA,QAA1CO,eAA0C,uEAAxBN,sBAAwB;AAAA,QACzIO,OADyI,GAClHH,OADkH,CACzIG,OADyI;AAAA,QAChIC,SADgI,GAClHJ,OADkH,CAChII,SADgI;;AAE/IA,gBAAYA,YAAYA,SAAZ,GAAwB,GAApC;AACA,QAAIC,SAASF,YAAY,KAAZ,GAAqB,EAArB,GAAyB,QAAtC;AACA,QAAMG,SAAYJ,gBAAgBJ,iBAAhB,EAAmCM,SAAnC,CAAZ,SAAN;AACA,QAAMG,OAAOR,KAAKS,GAAL,CAAS;AAAA,eAAKP,WAAWQ,CAAX,EAAcX,iBAAd,EAAiCM,SAAjC,CAAL;AAAA,KAAT,EAA2DM,IAA3D,CAAgE,MAAhE,CAAb;AACAL,kBAAYA,MAAZ,GAAqBC,MAArB,GAA8BC,IAA9B;AACA,WAAOF,MAAP;AACH;;AAEM,SAASV,gBAAT,CAA0BgB,GAA1B,EAA+Bb,iBAA/B,EAAkDM,SAAlD,EAA6D;AAChE,WAAON,kBACFU,GADE,CACE,aAAK;AACN,YAAII,iBAAiBC,CAArB;AACA,YAAI,OAAOA,EAAEC,UAAT,KAAwB,UAA5B,EAAwC;AACpCF,wDAAsBC,CAAtB,EAA4BA,EAAEC,UAAF,CAAaH,GAAb,CAA5B;AACH;AACD,eAAOd,uBAAuBe,eAAeG,WAAf,CAA2BJ,GAA3B,CAAvB,EAAwDP,SAAxD,CAAP;AACH,KAPE,EAQFM,IARE,CAQGN,SARH,CAAP;AASH;;AAEM,SAASR,sBAAT,CAAgCE,iBAAhC,EAAmDM,SAAnD,EAA8D;AACjE,WAAON,kBACFU,GADE,CACE;AAAA,eAAKX,uBAAuBgB,EAAEG,gBAAzB,EAA2CZ,SAA3C,CAAL;AAAA,KADF,EAEFM,IAFE,CAEGN,SAFH,CAAP;AAGH;;AAED;AACO,SAASP,sBAAT,CAAgCoB,MAAhC,EAAyD;AAAA,QAAjBb,SAAiB,uEAAL,GAAK;;AAC5D,QAAIC,SAASY,MAAb;AACA,QAAMC,QAAQ,GAAd;AACA,QAAMC,eAAe,IAArB;AACA,QAAMC,gBAAgB,CAAChB,SAAD,EAAYc,KAAZ,EAAmB,IAAnB,EAAyB,MAAzB,CAAtB;AACAb,aAASgB,OAAOhB,MAAP,EAAeiB,OAAf,CAAuB,IAAIC,MAAJ,MAAcL,KAAd,EAAuB,GAAvB,CAAvB,EAAoDC,YAApD,CAAT;;AAEA,QAAI,oCAAkBd,MAAlB,EAA0Be,aAA1B,CAAJ,EAA8C;AAC1Cf,sBAAYa,KAAZ,GAAoBb,MAApB,GAA6Ba,KAA7B;AACH;;AAED,WAAOb,MAAP;AACH","file":"exportUtils.js","sourcesContent":["import { stringContainsAny } from './stringUtils';\r\n\r\nexport function convertToCsvString(columnDefinitions, data, options = {}, formatRows = defaultFormatRow, formatHeaderRow = defaultFormatHeaderRow) {\r\n    let { utf8Bom, delimeter } = options;\r\n    delimeter = delimeter ? delimeter : ',';\r\n    let result = utf8Bom === false  ? '': '\\ufeff';\r\n    const header = `${formatHeaderRow(columnDefinitions, delimeter)}\\r\\n`;\r\n    const rows = data.map(r => formatRows(r, columnDefinitions, delimeter)).join('\\r\\n');\r\n    result = `${result}${header}${rows}`;\r\n    return result;\r\n}\r\n\r\nexport function defaultFormatRow(row, columnDefinitions, delimeter) {\r\n    return columnDefinitions\r\n        .map(d => {\r\n            let cellDefinition = d;\r\n            if (typeof d.defineCell === 'function') {\r\n                cellDefinition = { ...d, ...d.defineCell(row) };\r\n            }\r\n            return safeConvertToCsvRecord(cellDefinition.propertyMap(row), delimeter)\r\n        })\r\n        .join(delimeter);\r\n}\r\n\r\nexport function defaultFormatHeaderRow(columnDefinitions, delimeter) {\r\n    return columnDefinitions\r\n        .map(d => safeConvertToCsvRecord(d.columnHeaderText, delimeter))\r\n        .join(delimeter);\r\n}\r\n\r\n// according to https://tools.ietf.org/html/rfc4180\r\nexport function safeConvertToCsvRecord(record, delimeter = ',') {\r\n    let result = record;\r\n    const quote = '\"';\r\n    const escapedQuote = '\"\"';\r\n    const charsToEscape = [delimeter, quote, '\\n', '\\r\\n'];\r\n    result = String(result).replace(new RegExp(`${quote}`, 'g'), escapedQuote);\r\n\r\n    if (stringContainsAny(result, charsToEscape)) {\r\n        result = `${quote}${result}${quote}`;\r\n    }\r\n\r\n    return result;\r\n}\r\n"]}