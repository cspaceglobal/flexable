{"version":3,"sources":["../../src/utilities/fileUtils.js"],"names":[],"mappings":";;;;;QAUgB;QAQA;;;;;;;;;;;AART,SAAS,cAAT,CAAwB,OAAxB,EAAiC,QAAjC,EAAqF;QAA1C,iEAAW,0BAA+B;QAAnB,gEAAU,uBAAS;;AACxF,QAAM,IAAI,SAAS,aAAT,CAAuB,GAAvB,CAAJ,CADkF;AAExF,MAAE,WAAF,GAAgB,UAAhB,CAFwF;AAGxF,MAAE,QAAF,GAAa,QAAb,CAHwF;AAIxF,MAAE,IAAF,GAAS,kBAAkB,QAAlB,EAA4B,OAA5B,EAAqC,OAArC,CAAT,CAJwF;AAKxF,MAAE,KAAF,GALwF;CAArF;;AAQA,SAAS,iBAAT,CAA2B,QAA3B,EAAqC,OAArC,EAA8C,OAA9C,EAAuD;AAC1D,qBAAe,yBAAoB,gBAAW,mBAAmB,OAAnB,CAA9C,CAD0D;CAAvD","file":"fileUtils.js","sourcesContent":["/**\r\n * function to export data to a file\r\n * Note that \"breaks\" React encapsulation, but it's a throw-away element\r\n * that does not actually get added to the DOM\r\n * @constructor\r\n * @param {string} content - The content to be represented as a file.\r\n * @param {string} fileName - The name of the file to be exported (with extension)\r\n * @param {string} mimeType - The MIME type of the file\r\n * @param {string} charset - The charset for the file (defaults to utf-8)\r\n */\r\nexport function downloadToFile(content, fileName, mimeType = 'text/csv', charset = 'utf-8') {\r\n    const a = document.createElement('a');\r\n    a.textContent = 'download';\r\n    a.download = fileName;\r\n    a.href = getEncodedDataUri(mimeType, charset, content);\r\n    a.click();\r\n}\r\n\r\nexport function getEncodedDataUri(mimeType, charset, content) {\r\n    return `data:${mimeType};charset=${charset},${encodeURIComponent(content)}`;\r\n}"]}