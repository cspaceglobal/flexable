{"version":3,"sources":["../src/Row.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;;;AAEO,IAAM,0BAAS,SAAT,MAAS,CAAC,IAAD;WAAU,gBAS1B;YARF,iBAQE;YAPF,2BAOE;YANF,mBAME;YALF,uBAKE;YAJF,2CAIE;YAHF,yBAGE;YAFF,yDAEE;YADC,sKACD;;AACF,YAAM,cAAiB,YAAe,eAAf,GAA8B,EAA9B,kBAAjB,CADJ;AAEF,YAAM,oBAAoB,SAApB,iBAAoB,CAAC,SAAD,EAAY,iBAAZ;mBAAmC,gBAAM,QAAN,CAAe,GAAf,CAAmB,SAAnB,EAA8B,UAAC,CAAD,EAAI,CAAJ,EAAU;AACjG,oBAAM,mBAAmB,oBAAoB,kBAAkB,CAAlB,CAApB,GAA2C,sBAAc,IAAd,CAA3C,CADwE;AAEjG,uBAAO,gBAAM,YAAN,CAAmB,CAAnB,2BAAwB,KAAQ,kBAAa,CAArB,IAA6B,mBAAsB,oBAAkB,mBAA7F,CAAP,CAFiG;aAAV;SAAjE,CAFxB;;AAOF,YAAG,CAAC,QAAD,EAAW;AACV,mBACI;;2CAAqB;AACJ,0BAAM,IAAN;AACA,2BAAO,KAAP;AACA,+BAAW,UAAX;AACA,uCAAmB,iBAAnB,GAJjB;gBAKK,CAAC,QAAD,IAAa,kBAAkB,GAAlB,CAAsB,YAAM;AACtC,2BAAQ,8BAAC,IAAD,OAAR,CADsC;iBAAN,CAAnC;gBAGA,4BACG,uCAAK,OAAO,EAAE,OAAO,EAAP,EAAT,EAAL,CADH;aATT,CADU;SAAd;;;AAPE,eAyBE;;uCAAqB;AACJ,sBAAM,IAAN;AACA,uBAAO,KAAP;AACA,2BAAW,UAAX;AACA,mCAAmB,iBAAnB,GAJjB;YAKK,4BACG,QADH;YAEA,4BACG,uCAAK,OAAO,EAAE,OAAO,EAAP,EAAT,EAAL,CADH;SART,CAxBE;KAT0B;CAAV;;AA+CtB,OAAO,SAAP,GAAmB;AACf,UAAM,iBAAU,MAAV;AACN,eAAW,iBAAU,MAAV;AACX,WAAO,iBAAU,MAAV;AACP,aAAS,iBAAU,MAAV;AACT,uBAAmB,iBAAU,KAAV;AACnB,8BAA0B,iBAAU,IAAV;CAN9B;;AASA,OAAO,YAAP,GAAsB;AAClB,8BAA0B,IAA1B;CADJ;;AAIA,IAAM,aAAa,sBAAb;;kBAES","file":"Row.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport FlexableElement from './FlexableElement';\r\nimport DefaultCell from './Cell';\r\n\r\nexport const RowHOC = (Cell) => ({\r\n    _key,\r\n    className,\r\n    style,\r\n    rowData,\r\n    columnDefinitions,\r\n    children,\r\n    includeVerticalScrollbar,\r\n    ...remainingProps\r\n}) => {\r\n    const _className = `${ className ? `${className} ` : '' }flexable-row`;\r\n    const transformChildren = (_children, _passthroughProps) => (React.Children.map(_children, (c, i) => {\r\n        const columnDefinition = columnDefinitions ? columnDefinitions[i] : Object.create(null);\r\n        return React.cloneElement(c, { key: `${_key}-cell-${i}`, ..._passthroughProps, ...columnDefinition, rowData });\r\n    }));\r\n\r\n    if(!children) {\r\n        return (\r\n            <FlexableElement {...remainingProps}\r\n                             _key={_key}\r\n                             style={style}\r\n                             className={_className}\r\n                             transformChildren={transformChildren} >\r\n                {!children && columnDefinitions.map(() => {\r\n                    return (<Cell />)\r\n                })}\r\n                {includeVerticalScrollbar &&\r\n                    <div style={{ width: 25 }}></div>}\r\n            </FlexableElement>\r\n        );\r\n    }\r\n\r\n    // TODO: test\r\n    return (\r\n        <FlexableElement {...remainingProps}\r\n                         _key={_key}\r\n                         style={style}\r\n                         className={_className}\r\n                         transformChildren={transformChildren} >\r\n            {includeVerticalScrollbar &&\r\n                children }\r\n            {includeVerticalScrollbar &&\r\n                <div style={{ width: 25 }}></div> }\r\n        </FlexableElement>\r\n    );\r\n};\r\n\r\nRowHOC.propTypes = {\r\n    _key: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    rowData: PropTypes.object,\r\n    columnDefinitions: PropTypes.array,\r\n    includeVerticalScrollbar: PropTypes.bool\r\n};\r\n\r\nRowHOC.defaultProps = {\r\n    includeVerticalScrollbar: true\r\n};\r\n\r\nconst DefaultRow = RowHOC(DefaultCell);\r\n\r\nexport default DefaultRow;\r\n\r\n/*import React, { Component, PropTypes } from 'react';\r\n\r\nimport FlexableElement from './FlexableElement.jsx';\r\nimport DefaultCell from './Cell.jsx';\r\n\r\nexport const RowHOC = (Cell) => class Row extends Component {\r\n\r\n    static propTypes = {\r\n        key: PropTypes.string.isRequired,\r\n        className: PropTypes.string,\r\n        style: PropTypes.object,\r\n        rowData: PropTypes.object,\r\n        columnDefinitions: PropTypes.array\r\n    };\r\n\r\n    render() {\r\n        const _className = `${ className ? `${className} ` : '' }flexable-row`;\r\n        const transformChildren = (_children, _passthroughProps) => (React.Children.map(_children, (c, i) => {\r\n            const columnDefinition = columnDefinitions ? columnDefinitions[i] : Object.create(null);\r\n            return React.cloneElement(c, { key: `${_key}-cell-${i}`, ..._passthroughProps, ...columnDefinition, rowData });\r\n        }));\r\n\r\n        return (\r\n            <FlexableElement key={_key}\r\n                style={style}\r\n                className={_className}\r\n                transformChildren={transformChildren}\r\n                {...remainingProps}>\r\n                {children.length === 0 && columnDefinitions.map(() => {\r\n                    return (<Cell />)\r\n                })}\r\n            </FlexableElement>\r\n        );\r\n    }\r\n}\r\n\r\nconst DefaultRow = RowHOC(DefaultCell);\r\n\r\nexport default DefaultRow;*/\r\n"]}