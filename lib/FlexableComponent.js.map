{"version":3,"sources":["../src/FlexableComponent.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEM;;;;;;;;;;iCACO;yBACgI,KAAK,KAAL,CADhI;gBACG,mBADH;gBACS,eADT;gBACa,6BADb;gBACwB,2BADxB;gBACkC,6BADlC;gBAC6C,qBAD7C;gBACoD,6CADpD;gBACuE,mBADvE;gBAC6E,2CAD7E;gBAC+F,6BAD/F;gBAC6G,6LAD7G;;AAEL,gBAAI,OAAO,WAAW,QAAX,GAAsB,SAAtB,CAFN;AAGL,gBAAI,qBAAqB,iBAArB,CAHC;AAIL,gBAAM,mBAAmB,sBAAO,cAAP,EAAuB,SAAvB,CAAnB,CAJD;;AAML,gBAAI,CAAC,kBAAD,EAAqB;AACrB,oBAAI,gBAAJ,EAAsB;AAClB,yCAAqB;+BAAM,gBAAM,QAAN,CAAe,GAAf,CAAmB,IAAnB,EAAyB,UAAC,CAAD,EAAG,CAAH;mCAAS,gBAAM,YAAN,CAAmB,CAAnB,2BAAwB,KAAK,iBAAiB,IAAjB,EAAuB,CAAvB,CAAL,IAAmC,iBAA3D;yBAAT;qBAA/B,CADH;iBAAtB,MAEO;AACH,yCAAqB;+BAAM,gBAAM,QAAN,CAAe,GAAf,CAAmB,IAAnB,EAAyB;mCAAK,gBAAM,YAAN,CAAmB,CAAnB,EAAsB,gBAAtB;yBAAL;qBAA/B,CADlB;iBAFP;aADJ;;AAQA,gBAAM,sBAAsB,mBAAmB,IAAnB,EAAyB,gBAAzB,CAAtB,CAdD;;AAgBL,mBACI;;kBAAK,IAAI,EAAJ,EAAQ,KAAK,IAAL,EAAW,OAAO,KAAP,EAAc,WAAW,SAAX,EAAtC;gBACM,gBAAM,QAAN,CAAe,KAAf,CAAqB,IAArB,IAA6B,CAA7B,GAAiC,mBAAjC,GAAuD,IAAvD;aAFV,CAhBK;;;WADP;;;AAuBL;;AAED,kBAAkB,SAAlB,GAA8B;AAC1B,UAAM,iBAAU,MAAV;AACN,eAAW,iBAAU,MAAV;AACX,WAAO,iBAAU,MAAV;AACP,UAAM,iBAAU,GAAV;AACN,eAAW,iBAAU,KAAV;AACX,uBAAmB,iBAAU,IAAV;AACnB,sBAAkB,iBAAU,IAAV;CAPtB;;AAUA,kBAAkB,YAAlB,GAAiC;AAC7B,UAAM,EAAN;AACA,WAAO,sBAAc,IAAd,CAAP;AACA,eAAW,EAAX;AACA,eAAW,EAAX;CAJJ;;kBAOe","file":"FlexableComponent.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport except from 'except';\r\n\r\nclass FlexableComponent extends Component  {\r\n    render() {\r\n        const { _key, id, className, children, _children, style, transformChildren, text, generateChildKey, omitProps, ...remainingProps } = this.props;\r\n        let kids = children ? children : _children;\r\n        let _transformChildren = transformChildren;\r\n        const passthroughProps = except(remainingProps, omitProps);\r\n\r\n        if (!_transformChildren) {\r\n            if (generateChildKey) {\r\n                _transformChildren = () => React.Children.map(kids, (c,i) => React.cloneElement(c, { key: generateChildKey(_key, i), ...passthroughProps }));\r\n            } else {\r\n                _transformChildren = () => React.Children.map(kids, c => React.cloneElement(c, passthroughProps))\r\n            }\r\n        }\r\n\r\n        const transformedChildren = _transformChildren(kids, passthroughProps);\r\n\r\n        return (\r\n            <div id={id} key={_key} style={style} className={className}>\r\n                { React.Children.count(kids) > 0 ? transformedChildren : text }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nFlexableComponent.propTypes = {\r\n    _key: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    text: PropTypes.any,\r\n    omitProps: PropTypes.array,\r\n    transformChildren: PropTypes.func,\r\n    generateChildKey: PropTypes.func\r\n};\r\n\r\nFlexableComponent.defaultProps = {\r\n    text: '',\r\n    style: Object.create(null),\r\n    omitProps: [],\r\n    className: ''\r\n};\r\n\r\nexport default FlexableComponent;\r\n"]}