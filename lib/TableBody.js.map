{"version":3,"sources":["../src/TableBody.js"],"names":["TableBodyHOC","Row","className","style","tableData","columnDefinitions","rowClassName","rowStyle","includeVerticalScrollbar","setRef","remainingProps","_className","transformRows","keyPrefix","children","passthroughProps","Children","map","c","i","isValidElement","cloneElement","_key","rowData","d","propTypes","string","object","array","bool","func","defaultProps","DefaultTableBody"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,sCAAe,SAAfA,YAAe,CAACC,GAAD;AAAA,WAAS,gBAU/B;AAAA,YATFC,SASE,QATFA,SASE;AAAA,YARFC,KAQE,QARFA,KAQE;AAAA,YAPFC,SAOE,QAPFA,SAOE;AAAA,YANFC,iBAME,QANFA,iBAME;AAAA,YALFC,YAKE,QALFA,YAKE;AAAA,YAJFC,QAIE,QAJFA,QAIE;AAAA,YAHFC,wBAGE,QAHFA,wBAGE;AAAA,YAFFC,MAEE,QAFFA,MAEE;AAAA,YADCC,cACD;;AACF,YAAMC,mBAAgBH,2BAA2B,kCAA3B,GAAgE,EAAhF,KAAsFN,kBAAgBA,SAAhB,GAA6B,EAAnH,CAAN;AACA,YAAMU,gBAAgB,SAAhBA,aAAgB,CAACC,SAAD;AAAA,mBAAe,UAACC,QAAD,EAAWC,gBAAX;AAAA,uBAAiC,gBAAMC,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6B,UAACI,CAAD,EAAIC,CAAJ,EAAU;AACzG,wBAAI,CAAC,gBAAMC,cAAN,CAAqBF,CAArB,CAAL,EAA8B;AAC1B,+BAAOA,CAAP;AACH;AACD,2BAAO,gBAAMG,YAAN,CAAmBH,CAAnB;AACHI,8BAAST,SAAT,SAAsBM,CADnB;AAEHhB,+BAAOI,QAFJ;AAGHL,mCAAWI,YAHR;AAIHD,2CAAmBA,iBAJhB;AAKHkB,iCAASnB,UAAUe,CAAV,CALN;AAMHX;AANG,uBAOAO,gBAPA,EAAP;AASH,iBAbqE,CAAjC;AAAA,aAAf;AAAA,SAAtB;;AAeA,YAAI,CAACN,MAAL,EAAa;AACT,mBACI;AAAA;AAAA,2CAAqBC,cAArB;AACI,wBAAG,qBADP;AAEI,+BAAWC,UAFf;AAGI,2BAAOR,KAHX;AAII,uCAAmBS,cAAc,KAAd,CAJvB;AAKK,iBAACF,eAAeI,QAAhB,IAA4BV,UAAUa,GAAV,CAAc,UAACO,CAAD,EAAIL,CAAJ,EAAU;AACjD,2BAAQ,8BAAC,GAAD,IAAK,cAAYA,CAAjB,GAAR;AACH,iBAF4B,CALjC;AAQK,iBAAC,CAACT,eAAeI,QAAjB,IACGJ,eAAeI;AATvB,aADJ;AAaH;;AAED,eACI;AAAA;AAAA,uCAAuBJ,cAAvB;AACiB,oBAAG,qBADpB;AAEiB,qBAAKD,MAFtB;AAGiB,2BAAWE,UAH5B;AAIiB,uBAAOR,KAJxB;AAKiB,mCAAmBS,cAAc,KAAd,CALpC;AAMK,aAACF,eAAeI,QAAhB,IAA4BV,UAAUa,GAAV,CAAc,UAACO,CAAD,EAAIL,CAAJ,EAAU;AACjD,uBAAQ,8BAAC,GAAD,IAAK,cAAYA,CAAjB,GAAR;AACH,aAF4B,CANjC;AASK,aAAC,CAACT,eAAeI,QAAjB,IACGJ,eAAeI;AAVvB,SADJ;AAcH,KAzD2B;AAAA,CAArB;;AA2DPd,aAAayB,SAAb,GAAyB;AACrBvB,eAAW,iBAAUwB,MADA;AAErBpB,kBAAc,iBAAUoB,MAFH;AAGrBvB,WAAO,iBAAUwB,MAHI;AAIrBpB,cAAU,iBAAUoB,MAJC;AAKrBvB,eAAW,iBAAUuB,MALA;AAMrBtB,uBAAmB,iBAAUuB,KANR;AAOrBpB,8BAA0B,iBAAUqB,IAPf;AAQrBpB,YAAQ,iBAAUqB;AARG,CAAzB;;AAWA9B,aAAa+B,YAAb,GAA4B;AACxBvB,8BAA0B;AADF,CAA5B;;AAIA,IAAMwB,mBAAmBhC,2BAAzB;;kBAEegC,gB","file":"TableBody.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport FlexableComponent from './FlexableComponent';\r\nimport FlexableElement from './FlexableElement';\r\nimport DefaultRow from './Row';\r\n\r\nexport const TableBodyHOC = (Row) => ({\r\n    className,\r\n    style,\r\n    tableData,\r\n    columnDefinitions,\r\n    rowClassName,\r\n    rowStyle,\r\n    includeVerticalScrollbar,\r\n    setRef,\r\n    ...remainingProps\r\n}) => {\r\n    const _className = `${includeVerticalScrollbar ? 'flexable-vertical-scroll-overlay' : ''}${ className ? ` ${className}`: '' }`;\r\n    const transformRows = (keyPrefix) => (children, passthroughProps) => (React.Children.map(children, (c, i) => {\r\n        if (!React.isValidElement(c)) {\r\n            return c;\r\n        }\r\n        return React.cloneElement(c, {\r\n            _key: `${keyPrefix}-${i}`,\r\n            style: rowStyle,\r\n            className: rowClassName,\r\n            columnDefinitions: columnDefinitions,\r\n            rowData: tableData[i],\r\n            includeVerticalScrollbar,\r\n            ...passthroughProps\r\n        });\r\n    }));\r\n\r\n    if (!setRef) {\r\n        return (\r\n            <FlexableElement {...remainingProps}\r\n                id=\"flexable-table-body\"\r\n                className={_className}\r\n                style={style}\r\n                transformChildren={transformRows('row')}>\r\n                {!remainingProps.children && tableData.map((d, i) => {\r\n                    return (<Row key={`row-${i}`}/>)\r\n                })}\r\n                {!!remainingProps.children &&\r\n                    remainingProps.children}\r\n            </FlexableElement>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <FlexableComponent {...remainingProps}\r\n                         id=\"flexable-table-body\"\r\n                         ref={setRef}\r\n                         className={_className}\r\n                         style={style}\r\n                         transformChildren={transformRows('row')}>\r\n            {!remainingProps.children && tableData.map((d, i) => {\r\n                return (<Row key={`row-${i}`}/>)\r\n            })}\r\n            {!!remainingProps.children &&\r\n                remainingProps.children}\r\n        </FlexableComponent>\r\n    );\r\n};\r\n\r\nTableBodyHOC.propTypes = {\r\n    className: PropTypes.string,\r\n    rowClassName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    rowStyle: PropTypes.object,\r\n    tableData: PropTypes.object,\r\n    columnDefinitions: PropTypes.array,\r\n    includeVerticalScrollbar: PropTypes.bool,\r\n    setRef: PropTypes.func\r\n};\r\n\r\nTableBodyHOC.defaultProps = {\r\n    includeVerticalScrollbar: true\r\n};\r\n\r\nconst DefaultTableBody = TableBodyHOC(DefaultRow);\r\n\r\nexport default DefaultTableBody;"]}