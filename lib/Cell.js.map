{"version":3,"sources":["../src/Cell.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,IAAM,OAAO,SAAP,IAAO,OAOP;QANF,iBAME;QALF,2BAKE;QAJF,mBAIE;QAHF,uBAGE;QAFF,+BAEE;QADC,wHACD;;AACF,QAAM,cAAiB,YAAe,eAAf,GAA8B,EAA9B,uBAAjB,CADJ;AAEF,QAAI,YAAY,SAAZ,IAAyB,gBAAgB,SAAhB,EAA2B;AACpD,eACI,uCAAK,OAAO,KAAP,EAAc,WAAW,UAAX,EAAnB,CADJ,CADoD;KAAxD;;AAMA,QAAM,WAAW,YAAY,OAAZ,CAAX,CARJ;;AAUF,WACI,kFAAiB,MAAM,IAAN;AACA,eAAO,KAAP;AACA,mBAAW,UAAX;AACA,kBAAU,QAAV;AACA,cAAM,QAAN;AACA,iBAAS,OAAT;OACI,eANrB,CADJ,CAVE;CAPO;;AA4Bb,KAAK,SAAL,GAAiB;AACb,UAAM,iBAAU,MAAV;AACN,eAAW,iBAAU,MAAV;AACX,WAAO,iBAAU,MAAV;AACP,aAAS,iBAAU,MAAV;;;;;;;;;;;;;;AAcT,iBAAa,iBAAU,IAAV;CAlBjB;;kBAqBe","file":"Cell.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport FlexableElement from './FlexableElement';\r\n\r\nconst Cell = ({\r\n    _key,\r\n    className,\r\n    style,\r\n    rowData,\r\n    propertyMap,\r\n    ...remainingProps\r\n}) => {\r\n    const _className = `${ className ? `${className} ` : '' }flexable-row-cell`;\r\n    if (rowData === undefined || propertyMap === undefined) {\r\n        return (\r\n            <div style={style} className={_className}></div>\r\n        );\r\n    }\r\n\r\n    const cellData = propertyMap(rowData);\r\n\r\n    return (\r\n        <FlexableElement _key={_key}\r\n                         style={style}\r\n                         className={_className}\r\n                         cellData={cellData}\r\n                         text={cellData}\r\n                         rowData={rowData}\r\n                         {...remainingProps} />\r\n    );\r\n};\r\n\r\nCell.propTypes = {\r\n    _key: PropTypes.string,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n    rowData: PropTypes.object,\r\n    // propertyMap should be a function that\r\n    // takes the object representing a row\r\n    // and returns the data as you want to\r\n    // represent it as `cellData`\r\n    //\r\n    // If there are no child elements, the\r\n    // Cell will show the result of this function\r\n    // \"as is\"\r\n    // Otherwise, if the Cell has any child\r\n    // elements, the Cell will pass the 'cellData'\r\n    // to these child elements and leave it up\r\n    // to these elements to represent this data\r\n    // as they see fit\r\n    propertyMap: PropTypes.func\r\n};\r\n\r\nexport default Cell;\r\n"]}