{"version":3,"sources":["../src/Cell.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,IAAM,OAAO,SAAP,IAAO,OAKP;QAJF,iBAIE;QAHF,uBAGE;QAFF,yCAEE;QADC,uGACD;;;AAEF,QAAI,qBAAqB,IAArB,IAA6B,qBAAqB,SAArB,EAAgC;AAC7D,eAAQ,uCAAK,WAAU,mBAAV,EAAL,CAAR,CAD6D;KAAjE;;AAIA,QAAI,aAAa,gBAAb,CANF;AAOF,QAAI,OAAO,iBAAiB,UAAjB,KAAgC,UAAvC,EAAmD;;;;AAInD,gDAAkB,kBAAqB,iBAAiB,UAAjB,CAA4B,OAA5B,EAAvC,CAJmD;KAAvD;;AAOA,QAAM,aAAgB,WAAW,SAAX,GAA0B,WAAW,SAAX,MAA1B,GAAoD,EAApD,uBAAhB,CAdJ;;sBAgBsB,WAhBtB;QAgBM,sCAhBN;;;AAkBF,QAAI,YAAY,SAAZ,IAAyB,gBAAgB,SAAhB,EAA2B;AACpD,eACI,uCAAK,OAAO,WAAW,KAAX,EAAkB,WAAW,SAAX,EAA9B,CADJ,CADoD;KAAxD;;AAMA,QAAM,WAAW,YAAY,OAAZ,CAAX;;;;AAxBJ,WA6BE;;mCAAqB;AACJ,kBAAM,IAAN;WACI;AACJ,uBAAW,SAAX,GAHjB;QAIK,QAJL;KADJ,CA5BE;CALO;;AA2Cb,KAAK,SAAL,GAAiB;AACb,UAAM,iBAAU,MAAV;AACN,aAAS,iBAAU,MAAV;AACT,sBAAkB,iBAAU,MAAV;CAHtB;;kBAMe","file":"Cell.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport FlexableElement from './FlexableElement';\r\n\r\nconst Cell = ({\r\n    _key,\r\n    rowData,\r\n    columnDefinition,\r\n    ...remainingProps\r\n}) => {\r\n\r\n    if (columnDefinition === null || columnDefinition === undefined) {\r\n        return (<div className=\"flexable-row-cell\"/>);\r\n    }\r\n\r\n    let definition = columnDefinition;\r\n    if (typeof columnDefinition.defineCell === 'function') {\r\n        // callers should be prepared to handle scenario where rowData is undefined\r\n        // by still defining things like static styles and classNames (especially\r\n        // if they affect layout)\r\n        definition = { ...columnDefinition, ...columnDefinition.defineCell(rowData) };\r\n    }\r\n\r\n    const className = `${ definition.className ? `${definition.className} ` : '' }flexable-row-cell`;\r\n\r\n    const { propertyMap } = definition;\r\n\r\n    if (rowData === undefined || propertyMap === undefined) {\r\n        return (\r\n            <div style={definition.style} className={className}></div>\r\n        );\r\n    }\r\n\r\n    const children = propertyMap(rowData);\r\n\r\n    // note order of props is important here (e.g. we want className to over-write\r\n    // className in definition\r\n    return (\r\n        <FlexableElement {...remainingProps}\r\n                         _key={_key}\r\n                         {...definition}\r\n                         className={className}>\r\n            {children}\r\n         </FlexableElement>\r\n    );\r\n};\r\n\r\nCell.propTypes = {\r\n    _key: PropTypes.string,\r\n    rowData: PropTypes.object,\r\n    columnDefinition: PropTypes.object\r\n};\r\n\r\nexport default Cell;\r\n"]}