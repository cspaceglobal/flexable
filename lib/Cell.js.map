{"version":3,"sources":["../src/Cell.js"],"names":["Cell","_key","rowData","columnDefinition","remainingProps","undefined","definition","defineCell","className","propertyMap","style","children","propTypes","string","object"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,IAAMA,OAAO,SAAPA,IAAO,OAKP;AAAA,QAJFC,IAIE,QAJFA,IAIE;AAAA,QAHFC,OAGE,QAHFA,OAGE;AAAA,QAFFC,gBAEE,QAFFA,gBAEE;AAAA,QADCC,cACD;;;AAEF,QAAID,qBAAqB,IAArB,IAA6BA,qBAAqBE,SAAtD,EAAiE;AAC7D,eAAQ,uCAAK,WAAU,mBAAf,GAAR;AACH;;AAED,QAAIC,aAAaH,gBAAjB;AACA,QAAI,OAAOA,iBAAiBI,UAAxB,KAAuC,UAA3C,EAAuD;AACnD;AACA;AACA;AACAD,gDAAkBH,gBAAlB,EAAuCA,iBAAiBI,UAAjB,CAA4BL,OAA5B,CAAvC;AACH;;AAED,QAAMM,aAAgBF,WAAWE,SAAX,GAA0BF,WAAWE,SAArC,SAAoD,EAApE,uBAAN;;AAdE,sBAgBsBF,UAhBtB;AAAA,QAgBMG,WAhBN,eAgBMA,WAhBN;;;AAkBF,QAAIP,YAAYG,SAAZ,IAAyBI,gBAAgBJ,SAA7C,EAAwD;AACpD,eACI,uCAAK,OAAOC,WAAWI,KAAvB,EAA8B,WAAWF,SAAzC,GADJ;AAGH;;AAED,QAAMG,WAAWF,YAAYP,OAAZ,CAAjB;;AAEA;AACA;AACA,WACI;AAAA;AAAA,mCAAqBE,cAArB;AACiB,kBAAMH;AADvB,WAEqBK,UAFrB;AAGiB,uBAAWE,SAH5B;AAIKG;AAJL,KADJ;AAQH,CAzCD;;AA2CAX,KAAKY,SAAL,GAAiB;AACbX,UAAM,iBAAUY,MADH;AAEbX,aAAS,iBAAUY,MAFN;AAGbX,sBAAkB,iBAAUW;AAHf,CAAjB;;kBAMed,I","file":"Cell.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport FlexableElement from './FlexableElement';\r\n\r\nconst Cell = ({\r\n    _key,\r\n    rowData,\r\n    columnDefinition,\r\n    ...remainingProps\r\n}) => {\r\n\r\n    if (columnDefinition === null || columnDefinition === undefined) {\r\n        return (<div className=\"flexable-row-cell\"/>);\r\n    }\r\n\r\n    let definition = columnDefinition;\r\n    if (typeof columnDefinition.defineCell === 'function') {\r\n        // callers should be prepared to handle scenario where rowData is undefined\r\n        // by still defining things like static styles and classNames (especially\r\n        // if they affect layout)\r\n        definition = { ...columnDefinition, ...columnDefinition.defineCell(rowData) };\r\n    }\r\n\r\n    const className = `${ definition.className ? `${definition.className} ` : '' }flexable-row-cell`;\r\n\r\n    const { propertyMap } = definition;\r\n\r\n    if (rowData === undefined || propertyMap === undefined) {\r\n        return (\r\n            <div style={definition.style} className={className}></div>\r\n        );\r\n    }\r\n\r\n    const children = propertyMap(rowData);\r\n\r\n    // note order of props is important here (e.g. we want className to over-write\r\n    // className in definition\r\n    return (\r\n        <FlexableElement {...remainingProps}\r\n                         _key={_key}\r\n                         {...definition}\r\n                         className={className}>\r\n            {children}\r\n         </FlexableElement>\r\n    );\r\n};\r\n\r\nCell.propTypes = {\r\n    _key: PropTypes.string,\r\n    rowData: PropTypes.object,\r\n    columnDefinition: PropTypes.object\r\n};\r\n\r\nexport default Cell;\r\n"]}