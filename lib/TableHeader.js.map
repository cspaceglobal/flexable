{"version":3,"sources":["../src/TableHeader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,IAAM,0CAAiB,SAAjB,cAAiB,CAAC,eAAD;WAAqB,gBAU7C;YATF,2BASE;YARF,mBAQE;YAPF,2BAOE;YANF,2CAME;YALF,iCAKE;YAJF,yBAIE;YAHF,qBAGE;YAFF,yDAEE;YADC,0LACD;;AACF,YAAM,gBAAgB,SAAhB,aAAgB,CAAC,SAAD;mBAAe,UAAC,QAAD,EAAW,gBAAX;uBAAiC,gBAAM,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA6B,UAAC,CAAD,EAAI,CAAJ,EAAU;AACzG,wBAAI,CAAC,gBAAM,cAAN,CAAqB,CAArB,CAAD,EAA0B;AAC1B,+BAAO,CAAP,CAD0B;qBAA9B;;AAIA,2BAAO,gBAAM,YAAN,CAAmB,CAAnB;AACH,8BAAS,kBAAa,CAAtB;AACA,+BAAO,QAAP;AACA,mCAAW,YAAX;AACA,2CAAmB,iBAAnB;AACA,iCAAS,UAAU,CAAV,CAAT;AACA;uBACG,iBAPA,CAAP,CALyG;iBAAV;aAA9D;SAAf,CADpB;;AAiBF,YAAG,CAAC,MAAD,EAAS;AACR,mBACI;;2CAAqB;AACjB,wBAAG,uBAAH;AACA,+BAAW,SAAX;AACA,2BAAO,KAAP;AACA,uCAAmB,cAAc,YAAd,CAAnB,GAJJ;gBAKK,CAAC,eAAe,QAAf,IACE,8BAAC,eAAD,IAAiB,mBAAjB,CADH;gBAEA,CAAC,CAAC,eAAe,QAAf,IACC,eAAe,QAAf;aATZ,CADQ;SAAZ;;AAeA,eACI;;uCAAuB;AACnB,oBAAG,uBAAH;AACA,qBAAK,MAAL;AACA,2BAAW,SAAX;AACA,uBAAO,KAAP;AACA,mCAAmB,cAAc,YAAd,CAAnB,GALJ;YAMK,CAAC,eAAe,QAAf,IACE,8BAAC,eAAD,IAAiB,mBAAjB,CADH;YAEA,CAAC,CAAC,eAAe,QAAf,IACC,eAAe,QAAf;SAVZ,CAhCE;KAV6C;CAArB;;AAyD9B,eAAe,SAAf,GAA2B;AACvB,eAAW,iBAAU,MAAV;AACX,kBAAc,iBAAU,MAAV;AACd,WAAO,iBAAU,MAAV;AACP,cAAU,iBAAU,MAAV;AACV,eAAW,iBAAU,MAAV;AACX,uBAAmB,iBAAU,KAAV;AACnB,YAAQ,iBAAU,IAAV;AACR,8BAA0B,iBAAU,IAAV;CAR9B;;AAWA,eAAe,YAAf,GAA8B;AAC1B,8BAA0B,IAA1B;CADJ;;AAIA,IAAM,yBAAyB,wCAAzB;AACN,IAAM,qBAAqB,eAAe,sBAAf,CAArB;;kBAES","file":"TableHeader.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\n\r\nimport FlexableElement from './FlexableElement';\r\nimport FlexableComponent from './FlexableComponent';\r\nimport ColumnHeaderCell from './ColumnHeader';\r\nimport { RowHOC } from './Row';\r\n\r\nexport const TableHeaderHOC = (ColumnHeaderRow) => ({\r\n    className,\r\n    style,\r\n    tableData,\r\n    columnDefinitions,\r\n    rowClassName,\r\n    rowStyle,\r\n    setRef,\r\n    includeVerticalScrollbar,\r\n    ...remainingProps\r\n}) => {\r\n    const transformRows = (keyPrefix) => (children, passthroughProps) => (React.Children.map(children, (c, i) => {\r\n        if (!React.isValidElement(c)) {\r\n            return c;\r\n        }\r\n        \r\n        return React.cloneElement(c, {\r\n            _key: `${keyPrefix}-${i}`,\r\n            style: rowStyle,\r\n            className: rowClassName,\r\n            columnDefinitions: columnDefinitions,\r\n            rowData: tableData[i],\r\n            includeVerticalScrollbar,\r\n            ...passthroughProps\r\n        });\r\n    }));\r\n\r\n    if(!setRef) {\r\n        return (\r\n            <FlexableElement {...remainingProps}\r\n                id=\"flexable-table-header\"\r\n                className={className}\r\n                style={style}\r\n                transformChildren={transformRows('header-row')}>\r\n                {!remainingProps.children &&\r\n                    <ColumnHeaderRow key={`header-row`}/>}\r\n                {!!remainingProps.children &&\r\n                    remainingProps.children}\r\n            </FlexableElement>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <FlexableComponent {...remainingProps}\r\n            id=\"flexable-table-header\"\r\n            ref={setRef}\r\n            className={className}\r\n            style={style}\r\n            transformChildren={transformRows('header-row')}>\r\n            {!remainingProps.children &&\r\n                <ColumnHeaderRow key={`header-row`}/>}\r\n            {!!remainingProps.children &&\r\n                remainingProps.children}\r\n        </FlexableComponent>\r\n    );\r\n};\r\n\r\nTableHeaderHOC.propTypes = {\r\n    className: PropTypes.string,\r\n    rowClassName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    rowStyle: PropTypes.object,\r\n    tableData: PropTypes.object,\r\n    columnDefinitions: PropTypes.array,\r\n    setRef: PropTypes.func,\r\n    includeVerticalScrollbar: PropTypes.bool\r\n};\r\n\r\nTableHeaderHOC.defaultProps = {\r\n    includeVerticalScrollbar: true\r\n};\r\n\r\nconst DefaultColumnHeaderRow = RowHOC(ColumnHeaderCell);\r\nconst DefaultTableHeader = TableHeaderHOC(DefaultColumnHeaderRow);\r\n\r\nexport default DefaultTableHeader;"]}